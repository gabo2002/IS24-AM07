title Game

participant ClientState
participant ActiveClient
participant ServerDispatcher
participant GameController
participant OtherClient

note over ClientState,OtherClient: Game Setup
ServerDispatcher->ActiveClient: ServerGameStartAction
ActiveClient->ClientState: reflect()
ClientState->ActiveClient:
note over ActiveClient: Syncs the Model\nand PlayerState
ServerDispatcher->OtherClient: ServerGameStartAction
OtherClient->OtherClient: reflect()

note over ClientState,OtherClient: Initial Choices
ActiveClient->ServerDispatcher: PlayerInitialChoiceAction
ServerDispatcher->GameController: execute()
note over GameController: Places the Starter Card\nand sets the Objective Card
GameController->ServerDispatcher:
ServerDispatcher->OtherClient: PlayerInitialChoiceAction
OtherClient->OtherClient: reflect()
ServerDispatcher->ActiveClient: PlayerInitialChoiceAction
ActiveClient->ClientState: reflect()
ClientState->ActiveClient:

note over ClientState,OtherClient: Game Play
loop GameState == PLAYING
  opt Player's turn
    ActiveClient->ServerDispatcher: PlayerPlaceCardAction
    ServerDispatcher->GameController: execute()
    note over GameController: Attempts to place the selected\ncard and saves the result.
    GameController->ServerDispatcher:
    ServerDispatcher->OtherClient: PlayerPlaceCardAction
    OtherClient->OtherClient: reflect()
    note over OtherClient: If the execute succeeded\nplaces the card in the client.
    ServerDispatcher->ActiveClient: PlayerPlaceCardAction
    ActiveClient->ClientState: reflect()
    ClientState->ActiveClient:
    note over ActiveClient: If the execute did not\nsucceed, sets an error.
    
    ActiveClient->ServerDispatcher: PlayerPickCardAction
    ServerDispatcher->GameController: execute()
    note over GameController: Attempts to pick the chosen\ncard and increment the turn.
    GameController->ServerDispatcher:
    ServerDispatcher->OtherClient: PlayerPickCardAction
    OtherClient->OtherClient: reflect()
    note over OtherClient: Replicates the server execute\nand calculates the objective\nscore if the game has ended.
    ServerDispatcher->ActiveClient: PlayerPickCardAction
    ActiveClient->ClientState: reflect()
    ClientState->ActiveClient:
    note over ActiveClient: If the execute did not\nsucceed, sets an error.
  end
  
  opt Chat
    ActiveClient->ServerDispatcher: SendMessageAction
    ServerDispatcher->GameController: execute()
    note over GameController: Adds to each recipients's PlayerChat\nthe new chat message.
    GameController->ServerDispatcher:
    ServerDispatcher->OtherClient: SendMessageAction
    OtherClient->OtherClient: reflect()
    ServerDispatcher->ActiveClient: SendMessageAction
    ActiveClient->ClientState: reflect()
    ClientState->ActiveClient:
  end

note over ClientState,OtherClient: Disconnection Scenario
ActiveClient->ServerDispatcher: [Disconnects]
ServerDispatcher->ServerDispatcher: HangGameAction
ServerDispatcher->GameController: execute()
note over GameController: Sets the Player as disconnected.\nPicks a random card or skips\nthe turn for the Player if needed.
GameController->ServerDispatcher:
ServerDispatcher->OtherClient: HangGameAction
OtherClient->OtherClient: reflect()
note over OtherClient: Replicates the execute\nand sets the correct PlayerState
ServerDispatcher->ActiveClient: HangGameAction
ActiveClient->ClientState: reflect()
note over ClientState: Sets the PlayerState to\nDISCONNECTED
ClientState->ActiveClient:

note over ClientState,OtherClient: Reconnection Scenario
ActiveClient->ServerDispatcher: ResumeGameAction
ServerDispatcher->GameController: execute()
note over GameController: Removes the Player\nfrom the Disconnected list.
GameController->ServerDispatcher:
ServerDispatcher->OtherClient: ResumeGameAction
OtherClient->OtherClient: reflect()
note over OtherClient: Sets the correct PlayerState.
ServerDispatcher->ActiveClient: ResumeGameAction
ActiveClient->ClientState: reflect()
ClientState->ActiveClient:
note over ActiveClient: Resyncs the Game model and\nsets the correct PlayerState.

end
